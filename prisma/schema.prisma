generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Role {
  employe
  manager
  rh
  admin
}

enum EmploymentType {
  CDI
  CDD
  stage
  freelance
}

enum Status {
  actif
  en_conge
  suspendu
  archive
}

model User {
  id              String   @id @default(uuid())
  first_name      String
  last_name       String
  gender          Gender
  email           String   @unique
  password        String
  birth_date      DateTime
  national_id     String   @unique
  phone_number    String
  address         String
  hire_date       DateTime
  job_title       String
  department_id   Int?
  employment_type EmploymentType
  salaire_brut    Float
  status          Status
  photo           String?
  role            Role
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?

  // Relations
  // managerId     String?
  // manager       User?     @relation("ManagerToEmployees", fields: [managerId], references: [id])
  // subordonnes   User[]    @relation("ManagerToEmployees")

  department    Department? @relation("DepartmentUsers", fields: [department_id], references: [id])
  departmentsLed Department[] @relation("DepartmentHead") 
  leave_balances leave_balances[] @relation("UserLeaveBalances") // soldes de congés de l'utilisateur

  leaveRequests LeaveRequest[] @relation("UserLeaveRequests")
  validatedLeaveRequests LeaveRequest[] @relation("Validator")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?

  head_id     String?  // ID du chef du département
  head        User?    @relation("DepartmentHead", fields: [head_id], references: [id])

  users       User[]   @relation("DepartmentUsers") // employés du département

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model leave_types {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  annual_quota Int
  remuneration Boolean @default(false)

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  leave_balances leave_balances[] @relation("LeaveTypeBalances")
  leaveRequests LeaveRequest[]
}
model leave_balances {
  id          Int      @id @default(autoincrement())
  user_id     String
  leave_type_id Int
  balance     Int

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User      @relation("UserLeaveBalances", fields: [user_id], references: [id])
  leave_type  leave_types @relation("LeaveTypeBalances", fields: [leave_type_id], references: [id])

  @@unique([user_id, leave_type_id])
}

model LeaveRequest {
  id              Int       @id @default(autoincrement())
  user            User      @relation("UserLeaveRequests", fields: [user_id], references: [id])
  user_id         String

  leave_type      leave_types @relation(fields: [leave_type_id], references: [id])
  leave_type_id   Int

  startDate       DateTime
  endDate         DateTime

  status          LeaveStatus @default(EN_ATTENTE)
  reason          String

  validatedBy     String?   // optionnel : FK vers User
  validator       User?     @relation("Validator", fields: [validatedBy], references: [id])

  decisionReason  String?   // optionnel si refusé

  createdAt       DateTime  @default(now())
}

enum LeaveStatus {
  EN_ATTENTE
  APPROUVE
  REFUSE
}
